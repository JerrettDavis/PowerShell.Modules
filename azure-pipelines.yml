trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - "*"

variables:
  BuildVersion: "$(Build.BuildNumber)"
  FeedName: "$(ArtifactFeedName)"
  ModuleSearchPattern: "*.psd1"
  PesterPath: ""
  CoverageOutputDir: "$(Build.SourcesDirectory)/TestResults/Coverage"

pool:
  vmImage: "windows-latest"

stages:
  - stage: CI
    displayName: Build and Test
    jobs:
      - job: build_test
        displayName: Build and Test Modules
        steps:
          - checkout: self

          - task: PowerShell@2
            displayName: Discover + Build + Test
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            inputs:
              targetType: filePath
              filePath: build/ci-discover-and-build.ps1
              arguments: >-
                -RepoRoot "$(Build.SourcesDirectory)"
                -ModuleSearchPattern "$(ModuleSearchPattern)"
                -RunTests
                -CodeCoverage
                -CoverageOutputDir "$(CoverageOutputDir)"
                -Version "$(BuildVersion)"
                -PesterPath "$(PesterPath)"
              pwsh: true

          - task: PublishBuildArtifacts@1
            displayName: Publish Coverage Artifacts
            condition: always()
            inputs:
              PathtoPublish: "$(CoverageOutputDir)"
              ArtifactName: "coverage"
              publishLocation: "Container"

          - task: PublishCodeCoverageResults@1
            displayName: Publish Code Coverage (JaCoCo)
            condition: always()
            inputs:
              codeCoverageTool: JaCoCo
              summaryFileLocation: '$(CoverageOutputDir)/coverage.xml'
              reportDirectory: '$(CoverageOutputDir)'
              failIfCoverageEmpty: false

  - stage: Package
    displayName: NuGet Pack
    dependsOn: CI
    jobs:
      - job: pack
        displayName: Pack nuspec(s)
        pool:
          vmImage: "windows-latest"
        steps:
          - checkout: self

          - task: PowerShell@2
            displayName: Generate nuspec files for modules
            inputs:
              targetType: filePath
              filePath: build/generate-nuspecs.ps1
              arguments: >-
                -RepoRoot "$(Build.SourcesDirectory)"
                -ModuleSearchPattern "$(ModuleSearchPattern)"
              pwsh: true

          - task: NuGetToolInstaller@1
            displayName: Use NuGet 6.x
            inputs:
              versionSpec: "6.x"

          - task: NuGetCommand@2
            displayName: NuGet pack all nuspecs
            inputs:
              command: "pack"
              packagesToPack: "$(Build.SourcesDirectory)/out/nuspec/*.nuspec"
              versioningScheme: "byEnvVar"
              versionEnvVar: "BuildVersion"
              buildProperties: "VERSIONHERE=$(BuildVersion)"

          - task: PublishBuildArtifacts@1
            displayName: Publish NuGet Packages
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "NuGetPackage"
              publishLocation: "Container"

  - stage: Deploy
    displayName: Push Packages
    dependsOn: Package
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - job: nuget_push
        displayName: Push to internal feed
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: "NuGetPackage"
              itemPattern: "**"
              targetPath: "$(Pipeline.Workspace)"

          - task: NuGetCommand@2
            displayName: NuGet push
            inputs:
              command: "push"
              packagesToPush: "$(Pipeline.Workspace)/**/*.nupkg"
              nuGetFeedType: "internal"
              publishVstsFeed: "$(FeedName)"
